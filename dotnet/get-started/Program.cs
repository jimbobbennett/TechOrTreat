// More .NET IoT Samples here:
// * https://github.com/microsoft/Windows-iotcore-samples
// * https://github.com/dotnet/iot

using System;
using System.Device.Spi;
using System.Drawing;
using Iot.Device.Ws28xx;

// This code sample uses C# 9's Top Level Statements feature.
// A Main method is generated by the compiler for us.
// Learn more: https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/program-structure/top-level-statements

static int GetLedCount() {
    int count;
    if (!int.TryParse(Environment.GetEnvironmentVariable("LED_COUNT"), out count)) {
        // If we fail to parse the number of LED's or it is undefined set to 1 so we still attempt to light something.
        // If you're running this and 1 LED is always lighting up make sure LED_COUNT is set in your env.
        Console.WriteLine("⚠ LED_COUNT was not found or couldn't be parsed.");
        count = 1;
    }
    return count;
}

var ledCount = GetLedCount();
Console.WriteLine($"Coloring {ledCount} LEDs...");

var connectionSettings = new SpiConnectionSettings(0, 0) {
    ClockFrequency = 2400000,
    Mode = SpiMode.Mode0,
    DataBitLength = 8,
    
};

// Create an SPI device based on the current operating system.
// For Raspbian this should be a UnixSpiDevice.
var spiDevice = SpiDevice.Create(connectionSettings);
// Ws2812b is the spec for the type of lights we are using.
// The device we create is how we communicate with our LED's
var device = new Ws2812b(spiDevice, ledCount);
var image = device.Image;
// Clear the previous state.
image.Clear();
// Assign all pixels in the LED Strip to have the same color.
for(int x = 0; x < ledCount; ++x) {

    image.SetPixel(x, 0, Color.Blue);
}
device.Update(); // Actually update the LED strip